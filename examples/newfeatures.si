// ----------------------------
// --   SIGH: NEW FEATURES   --
// ----------------------------

// 1. New data structure: enumeration
// a value of this type can only be one of the possible options
enum FractionErrorType {
    DIVIDED_BY_ZERO,
    OTHER
}

// 2. Data can be stored in options.
// The value type can be different in each option
// The size of the data structure will be the size of the option id + the size of the maximum data
// This pattern (found in Haskell or Rust) can be used to handle errors without an exception system
// The caller receives a result, and has to handle all cases (or transfer the error to its own parent)
enum DivisionResult {
    VALUE(Float),
    ERROR(FractionErrorType)
}

// enums have a "take(FIELD)" function that returns the contained value of the field FIELD. if it is not the correct field, stop the program instantly.

// 3. Functions, classes and structs can take generic types
// The compiled code will be implemented once for each usage
enum Optional<T> {
    VALUE(T),
    NOTHING
}


// 3. struct can now hold functions. For consistence, they are renamed classes because in most languages, struct is only data.
// -> However, no inheritage or polymorphism yet - just some namespacing of functions
// -> "this" can be use to access the current instance - implicit first parameter of a function
// -> basic visibility is added (public/private). private functions or fields can only be accessed from inside the class. Default is public.

// 4. Functions can be overloaded if they have different signatures.
// when looking up a symbol, the compiler will look for a definition with matching parameter types.

// 5. operators can be overloaded (e.g define how to add two fractions together)
// -> primitive types have predefined operators that are compiled inline (a + between two Ints is juste a +)
// -> together with function overloading, operations on different types can be defined
// (ex define multiplication of two fractions, or multiplication of a fraction and an int)
// -> optional @commutative flag on BINARY operators: if set, the operation can be reversed. Otherwise, "this" is always at the LEFT of the operator
// (ex: the operation Fraction.*(Int) is defined, and is commutative, so if we have Int * Fraction, it will also call the function)

class Fraction<T> {
    // Fields
    var num: T
    var denom: T

    public fun toDecimal(): DivisionResult {
        if (this.denom == 0) {
            return DivisionResult.ERROR(FractionErrorType.DIVIDED_BY_ZERO)
        }
        else {
            return DivisionResult.VALUE(this.num / this.denom)
        }
    }

    // Operators
    @commutative
    public fun *(other: Fraction): Fraction {
        return $Fraction(this.num * other.num, this.denom * other.denom)
    }
    @commutative
    public fun *(other: T): Fraction {
        return $Fraction(this.num * other, this.denom)
    }

    // Note: constructor is the operator $<class_name>
    // by default, each parameter is a field of the class, in order, and is stored into it.
    // So the constructor here is useless.
    // It can be useful to hide private fields though if there are some
    // as all functions, it can be overloaded for different parameter combinations
    public fun $Fraction(num: T, denom: T) {
        this.num = num;
        this.denom = denom;
    }
}

// Example usage
var f1: Fraction<Int> = $Fraction<Int>(3, 4)
var f2: Fraction<Int> = $Fraction<Int>(1, 4)
var f3: Fraction<Int> = f1 * f2 // f3 will be 3/16

// Note: the class above takes a T parameter for the value, but in the functions the values are operated on
// in particular, they are
// -> divided, and the result is a Float
// -> mutliplied, and the result is a T
// -> compared with an Int
// As a remainder, when compiled, classes/functions/enums with type parameters are implemented once for each type
// If one of the destination type does not support the operators/methods used on it, the compilation will fail
// Ex: using Fraction<Bool> here will fail, because it will create a "copy" of the class where T is Bool, and it will fail to multiply them.
// Thus, the place where the Fraction<Bool> is created will be an error, because Bool does not satisfy T's constraints
// All of that without needing to implement an interface system ! :)
// Internally, each parameter type thus keeps a list of "required methods"
// Each time a method (operator or regular function) is called on that type, it is added to the list
// When instanciating the type param with a type, it is check to see if all the required methods are implemented, otherwise return an error
var err: Fraction<Bool> = $Fraction<Bool>(false, true) // -> error

// 6. Type inference
// Explicitely having to write the type everywhere is tedious
// When possible, the compiler will try to automatically detect the type
// There are various levels of difficulty:

// Basic cases - Easy
// Declarations where the type of the RHS is known
// -> Simply have to use it for the LHS
var auto = 5 // Int
var test = false // Bool
var myStr = "hello" // String
var f = $Fraction<Int>(1, 2) // Fraction<Int>

// More indirect cases - Medium
// Generic types where the type of the RHS is not fully known, but can be guessed from the parameters
// Harder, but still, all the needed information is in the RHS
// When evaluating the tree, the parameters will anyway be evaluated first, then the function call, where the inference will be trivial
var f4 = $Fraction(1, 2) // Fraction<Int>, because since the parameters are T, and we know their type, we can guess T

// Indirect cases - Hard
// Generic types, but the RHS of the declaration is not enough to deduce the type. The information may arrive later
var result = Optional.NOTHING // Optional<???>
// [...]
result = Optional.VALUE(42) // ok, now, we know it's Optional<Int>
result = Optional.VALUE(true) // nice try but no, error
// -> harder because we need a way to store "unknown type param" at the declaration, then update it once the information is known
// and when leaving scope, check if some types are left incomplete
// -> This is feasible but harder. This won't be in the scope of this project, or only if we have time at the end.

// 7. Pattern matching
// to make the usage of enums less tedious, some pattern matching capabilities are added

// -> to the declarations
// Declaration allow pattern matching
// It returns a boolean telling whether or note it matched
// It can only be used in a condition (if or while)
// If not, it can only be an identifier LHS (normal affectation)

// Examples:

// inference -> toDecimal returns a DivisionResult. the VALUE field contains a Float, so v is a Float
// However, the ERROR field is possible. so this must be used in an if or a while
if (var VALUE(v) = f.toDecimal()) {
    // use v
}
while (var VALUE(v) = f.toDecimal()) {
    // while the function returns a VALUE, loop
    // here, we have an infinite loop
    // But for example, with iterators, we can return a VALUE and when at the end return a NOTHING, which will stop the loop
}

// -> switch
// To easily test multiple branches at once
switch (f.toDecimal()) {
    case VALUE(v) -> {
        // use v
    }
    case ERROR(e) -> {
        // handle error
    }
    default -> {
        // If nothing else matched.
        // Note: here, it's nothing
        // Also, we can't access the value of the enum here
    }
}

// 8. Keywords
// "typeof" returns the type of the parameter
Type t = typeof(f);
t == Fraction<Int> // -> true

// "sizeof" returns the size in bytes of a value
sizeof(42) // -> 4
sizeof(Optional<Int>) // -> 5

// 9. For loop
// Because its missing
for (var i = 0 to 10) {
    // Do something

for (var i = 0 to 10 step 2) {
    // Do something every 2
}

// Abstract definition:
for (var i: T = INIT to MAX step STEP) {}
// -> i and INIT are of type T
// -> T must support the following operators:
//    -> ==(typeof(MAX)) -> possible to compare it with MAX
//    -> +(typeof(STEP)) -> possible to add STEP to it

// no foreach loop because it would require to ship some types by default (like Optional)


// 10. Bindings
// A programming language is cool, but without a way to bind to the OS (directly or through libs), you can't do much
// To fix this, we will introduce a binding system that will allow a program to bind to other JVM programs (.class)
// There are two possibilities to implement this: either let the compiler compile and import .class files
// (easier for the Sigh programmer, but requires a way to map class files to sigh data structures, as well as a .class parser
// (harder, though simpler than sigh, but out of scope of this project))
// The simplest possibility would be to create an interface in sigh that the compiler will map to external .class files

// Idea: the class is a sigh class, but can perform function calls to the given bound java class
// We decided to do this instead of directly allowing calls to the bounded class to allow a conversion layer between the two languages
// Example: if a Java function returns null in case of an absence of value, the binding class can transform it into an Optional
// Primitive types are automatically bound (int -> Int, bool -> Bool, String -> String, etc)

// Last, a java function can throw exception, a behaviour replaced in Sigh by the enumerations containing values.
// A system is thus needed to handle exceptions thrown by the bound function.

class File bound to java.io.File {
    fun $File(pathname: String) from Binding

    fun $File() {
        // Example of new constructor that doesn't exist in the bound class
        binding = $Binding("./default.txt")
    }

    fun createNew() // The function name here is for internal sigh usage, it doesn't need to be the name of a java function
    {
        switch (binding.createNewFile()) {
            case IOException(message) -> {
                // Handle that
            }
        }
    }

    fun canRead(): Bool {
        return binding.canRead().take(VALUE) // We use take to ignore all other variants. If an exception do occur, the program will stop.
    }

    fun ==(other: File): Bool {
        return binding.equals(other).take(VALUE)
    }
}

// Note: these bindings are not checked at compilation. The compiler will trust that the bound class indeed has the required functions.

// Summary:
// - A class can be bound to a java class which must be given with its fully specified name
// - Inside the class, we have access to a Binding type which represent to Java class we are bound to
// - if "from Binding" is added to a function, then its implementation is implicitly transferred to the bound class.
//     - the function is supposed to exist with the same name and parameters
//     - the type of the parameters must have a direct mapping from sigh to Java (either primitive, or a binding)
//     - the return value will be taken and returned automatically (meaning that it will crash on exception)
// - a call to a bound function returns an enum which contains a "VALUE" field as well as fields named like java exceptions. the type of the enum will be VALUE + used exception fields
// - the binding keyword refers to the bound object (like "this", but for the bound class). it is read only, except in constructor where it must be affected once
// - if there is enough time, the ``Binding`` class will be accessible for static functions